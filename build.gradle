/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Scala application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5/userguide/building_java_projects.html
 * This project uses @Incubating APIs which are subject to change.
 */


plugins {
    id 'scala'
    id 'idea'
    id 'application'
    id 'jacoco'
    alias(libs.plugins.gradlePlay)
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

scala {
    version = "2.13.16"
}

dependencies {
    implementation(libs.scala)
    implementation(libs.bundles.play)
    implementation(libs.bundles.db)
    implementation(libs.bundles.others)

    testImplementation(libs.bundles.scalaTest)
    testRuntimeOnly(libs.scalaXml)
}

jacoco {
    toolVersion = "0.8.11"
}

play {
    platform {
        playVersion = project.playVersion
        scalaVersion = project.scalaBinaryVersion
        javaVersion = JavaVersion.VERSION_17
    }

    injectedRoutesGenerator = true
}

tasks.withType(ScalaCompile).configureEach {
    scalaCompileOptions.additionalParameters = [
            "--encoding",
            "UTF-8"
    ]
}

tasks.withType(Test).configureEach {
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
        exceptionFormat "full"
    }
    jvmArgs = [
            '-Dconfig.resource=application.test.conf',
            '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
            '--add-opens', 'java.base/java.util=ALL-UNNAMED',
            '--add-opens', 'java.base/java.lang.reflect=ALL-UNNAMED'
    ]
    useJUnit()
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/routes/**',
                    '**/router/**',
                    '**/generated/**',
                    '**/*Reverse*.*',
                    '**/graphql/**',
                    '**/modules/**'
            ])
        }))
    }
}

test.dependsOn compileTestScala

tasks.withType(CopySpec).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(Tar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(Zip).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

buildDir = 'build'

sourceSets {
    main {
        scala {
            srcDir('$rootDir/app')
        }
    }
}

tasks.withType(Jar).configureEach {
    manifest {
        attributes(
                'Class-Path': provider { configurations.runtimeClasspath.files.collect { it.getName() } }.get().join(' '),
                'Main-Class': "play.core.server.ProdServerStart"
        )
    }
}
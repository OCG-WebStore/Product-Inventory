# Local development compose file

services:
    product-inventory:
        build:
            context: ..
            dockerfile: ./docker/Dockerfile
            args:
                - APP_VERSION=${APP_VERSION:-0.0.0}
        image: product-inventory:${APP_VERSION:-0.0.0}
        container_name: product-inventory
        healthcheck:
            test: ["CMD", "./product-inventory-scripts/healthcheck.sh"]
            interval: 15s
            timeout: 5s
            retries: 5
            start_period: 30s
        environment:
            - APP_VERSION=${APP_VERSION:-0.0.0}
            - DB_URL=jdbc:postgresql://postgres:5432/ocg
            - DB_USER=ocg
            - DB_PASSWORD=ocgsecret
            - REDIS_HOST=redis
            - REDIS_PORT=6379
            - REDIS_PASSWORD=ocgsecret
#            - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
        ports:
            - "9000:9000"
        depends_on:
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
#            kafka:
#                condition: service_healthy
        networks:
            - app-network
    
    postgres:
        image: postgres:14
        container_name: postgres
        environment:
            POSTGRES_DB: ocg
            POSTGRES_USER: ocg
            POSTGRES_PASSWORD: ocgsecret
        volumes:
            - pgdata:/var/lib/postgresql/data
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ocg -d ocg"]
            interval: 5s
            timeout: 5s
            retries: 5
        networks:
            - app-network
    
    redis:
        image: redis:7-alpine
        container_name: redis
        environment:
            REDIS_PASSWORD: "ocgsecret"
            command: sh -c redis-server --requirepass $${REDIS_PASSWORD}
        volumes:
            - redisdata:/data
        healthcheck:
            test: ["CMD", "redis-cli", "-a", "$${REDIS_PASSWORD}", "ping"]
            interval: 5s
            timeout: 5s
            retries: 5
        networks:
            - app-network
    
#    zookeeper:
#        image: confluentinc/cp-zookeeper:7.3.0
#        container_name: zookeeper
#        environment:
#            ZOOKEEPER_CLIENT_PORT: 2181
#            ZOOKEEPER_TICK_TIME: 2000
#        networks:
#            - app-network
#
#    kafka:
#        image: confluentinc/cp-kafka:7.3.0
#        container_name: kafka
#        depends_on:
#            - zookeeper
#        environment:
#            KAFKA_BROKER_ID: 1
#            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
#            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#        healthcheck:
#            test: ["CMD", "kafka-topics", "--list", "--bootstrap-server", "kafka:9092"]
#            interval: 10s
#            timeout: 5s
#            retries: 5
#        networks:
#            - app-network

volumes:
    pgdata:
    redisdata:

networks:
    app-network:
        driver: bridge